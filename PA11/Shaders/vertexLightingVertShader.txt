#version 330

layout (location = 0) in vec3 v_position;
layout (location = 1) in vec2 v_uv;
layout (location = 2) in vec3 vNormal;

smooth out vec2 uv;
smooth out vec4 color;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;

uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;
uniform vec4 LightPosition;
uniform vec4 SpotPosition;
uniform vec4 SpotDirection;
uniform float SpotCutoff;
uniform float Shininess;


void main(void)
{
	vec4 v = vec4(v_position, 1.0);
	vec3 pos = ((viewMatrix * modelMatrix) * v).xyz;
	vec3 L = normalize(LightPosition.xyz - pos);
	vec3 spotL = normalize(SpotPosition.xyz - pos);
	vec3 E = normalize(-pos);
	vec3 H = normalize(L + E);
	vec3 spotH = normalize(spotL + E);

	vec3 N = normalize((viewMatrix * modelMatrix) * vec4(vNormal, 0.0)).xyz;

	vec4 ambient = AmbientProduct;

	float Kd = max(dot(L,N), 0.0);
	vec4 diffuse = Kd*DiffuseProduct;
	float Ks = pow( max(dot(N,H), 0.0), Shininess);
	vec4 specular = Ks * SpecularProduct;
	if( dot(L,N) < 0.0) 
		specular = vec4(0.0, 0.0, 0.0,1.0);

	if( dot(spotL, N) > SpotCutoff)
	{
		float spotKd = max(dot(spotL, N), 0.0);
		vec4 spotDiffuse = spotKd * DiffuseProduct;
		float spotKs = pow( max(dot(N, spotH), 0.0), Shininess);
		vec4 spotSpecular = spotKs * SpecularProduct;
		if ( dot(spotL, N) < 0.0)
			spotSpecular = vec4(0.0, 0.0, 0.0, 1.0);
		color = ambient + diffuse + specular + spotDiffuse + spotSpecular;
	}

	else
		color = ambient + diffuse + specular;
	
	gl_Position = (projectionMatrix * viewMatrix * modelMatrix) * v;
	uv = v_uv;



	color.a = 1.0;
}
	
