#version 330

smooth in vec2 uv;

smooth in vec3 fN;
smooth in vec3 fL;
smooth in vec3 fE;
smooth in vec3 fsL;

out vec4 frag_color;

uniform mat4 projectionMatrix;
uniform mat4 viewMatrix;
uniform mat4 modelMatrix;

uniform sampler2D gSampler;

uniform vec4 AmbientProduct, DiffuseProduct, SpecularProduct;

uniform vec4 SpotDirection;
uniform float SpotCutoff;
uniform float Shininess;

float angle;


void main(void)
{
	vec3 N = normalize((viewMatrix * modelMatrix) * vec4(fN, 0.0)).xyz;
	vec3 E = normalize(fE);
	vec3 L = normalize(fL);
	vec3 spotL = normalize(fsL);

	vec3 H = normalize(L + E);
	vec3 spotH = normalize (spotL + E);

	vec4 ambient = AmbientProduct;

	float Kd = max(dot(L,N), 0.0);
	vec4 diffuse = Kd*DiffuseProduct;
	float Ks = pow( max(dot(N,H), 0.0), Shininess);
	vec4 specular = Ks * SpecularProduct;
	if( dot(L,N) < 0.0) specular = vec4(0.0, 0.0, 0.0, 1.0);

	angle = (dot(normalize(spotL), normalize(SpotDirection).xyz));
	angle = max(angle, 0);
	if( acos(angle) < SpotCutoff)
	{
		float spotKd = max(dot(spotL, N), 0.0);
		vec4 spotDiffuse = spotKd * vec4(.2, .2, .2, 1);
		float spotKs = pow( max(dot(N, spotH), 0.0), Shininess);
		vec4 spotSpecular = spotKs * vec4(.5, .5, 0, 1);
		if ( dot(spotL, N) < 0.0)
			spotSpecular = vec4(1.0, 0.0, 0.0, 1.0);

		frag_color = (ambient + diffuse + specular + spotDiffuse + spotSpecular) * texture2D(gSampler, uv.xy);
	}

	else
		frag_color = (ambient + diffuse + specular) * texture2D(gSampler, uv.xy);
	
	frag_color.a = 1.0;
}
